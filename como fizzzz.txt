criando crudzinho com go

ðŸ“Œ Stack:
Gorilla Mux â†’ Para gerenciar as rotas.
Gorm â†’ ORM para facilitar a interaÃ§Ã£o com o banco de dados.
PostgreSQL â†’ Banco de dados.
Docker (Opcional) â†’ Para rodar o banco sem instalar localmente

dei o mkdir e cd na pastinha do crud
criei o o go.mod com go mod init go-crud

dependencias: 

go get -u github.com/gorilla/mux
go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres

abri o docker desktop e subi o docker com nosso postgres 
para o crudzinho: 


issoe@DESKTOP-3VE80HL MINGW64 /d/CRUDWithGo/go-crud
$ docker run --name pgcrud -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=admin -e POSTGRES_DB=go_crud -p 5432:5432 -d postgres
80de615cbb15b90285a7a113ed4375e97ca4edb35c58ee2c6dabda6bfafe14f6


Estrutura do Projeto:

go-crud/
  â”œâ”€â”€ main.go         # Arquivo principal
  â”œâ”€â”€ database/       # Pasta com cÃ³digo do banco de dados
  â”‚   â””â”€â”€ database.go
  â”œâ”€â”€ handlers/       # Pasta com manipuladores de requisiÃ§Ãµes
  â”‚   â””â”€â”€ user.go
  â”œâ”€â”€ models/         # Pasta com estruturas de dados
  â”‚   â””â”€â”€ user.go
  â””â”€â”€ go.mod         # Arquivo de dependÃªncias

go.mod:
Ã‰ como se fosse o "package.json" do Node.js
Define o nome do mÃ³dulo e suas dependÃªncias
Gerencia as versÃµes das bibliotecas que vocÃª usa


models/user.go:
Define a estrutura de dados do usuÃ¡rio
Ã‰ como uma "classe" em outras linguagens
gorm.Model adiciona campos automÃ¡ticos (ID, CreatedAt, UpdatedAt, DeletedAt)


handlers/user.go:
SÃ£o como "controllers" em outras linguagens
Manipulam as requisiÃ§Ãµes HTTP (POST, GET, PUT, DELETE)
Cada funÃ§Ã£o trata uma rota especÃ­fica


database/database.go:
Configura a conexÃ£o com o PostgreSQL
Cria o banco de dados se nÃ£o existir
Cria as tabelas automaticamente


main.go:
Ã‰ o ponto de entrada da aplicaÃ§Ã£o
Configura as rotas (endpoints da API)
Inicia o servidor HTTP